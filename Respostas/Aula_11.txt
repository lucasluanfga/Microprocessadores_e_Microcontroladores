Data: 12/05/2017

1. Defina a função void Atraso(volatile unsigned int x); que fornece um atraso de 'x' milissegundos. Utilize o Timer_A para a contagem de tempo, e assuma que o SMCLK já foi configurado para funcionar a 1 MHz. Esta função poderá ser utilizada diretamente nas outras questões desta prova.

void Atraso(volatile unsigned int x)
{
  TA0CCR0 = 1000-1;   // realiza 1000 conts de 1us
	
  TA0CTL = TASSEL_2 + ID_1 + MC_1;
	
  int count=0;
  int flag=0;
  
  while(flag==0){
    while((TA0CTL & TAIFG)==0);
      count += 1;
      TA0CTL &= ~TAIFG;
      
      if(count==x){ // valor do contador é igual ao delay?
      flag=1;       // se sim, flag é setada
      }
}

}

2. Pisque os LEDs da Launchpad numa frequência de 100 Hz.

#include <msp430g2553.h>

#define LED BIT0

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;	// Stop WDT
	
	BCSCTL1 = CALBC1_1MHZ;		//MCLK e SMCLK @ 1MHz
	DCOCTL = CALDCO_1MHZ;		//MCLK e SMCLK @ 1MHz
	P1OUT &= ~LED;
	P1DIR |= LED;
	TA0CCR0 = 1000-1; //10000-1;
	TA0CTL = TASSEL_2 + ID_1 + MC_1;
        int count=0;
        
	while(1)
	{
		while((TA0CTL & TAIFG)==0);
                count+=1;
                TA0CTL &= ~TAIFG;
                
                if(count==5){
                  P1OUT ^= LED;
                  count=0;
                }
		
	}
	return 0;
}

3. Pisque os LEDs da Launchpad numa frequência de 20 Hz.

#include <msp430g2553.h>

#define LED BIT0

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;	// Stop WDT
	
	BCSCTL1 = CALBC1_1MHZ;		//MCLK e SMCLK @ 1MHz
	DCOCTL = CALDCO_1MHZ;		//MCLK e SMCLK @ 1MHz
	P1OUT &= ~LED;
	P1DIR |= LED;
	TA0CCR0 = 1000-1; // realiza 1000 conts de 1us
	TA0CTL = TASSEL_2 + ID_1 + MC_1; // divide o clock por 1 e modo up e sub system Master clock
        int count=0;
        
	while(1)
	{
		while((TA0CTL & TAIFG)==0);// fica preso ate relizar 1000 contagens
 
                count+=1;                   // incrementa o contador
                TA0CTL &= ~TAIFG;           // inverte a flag
                
                if(count==25){     // se realizar 25 ciclos de 1ms Ligado e 25 ciclos de 1ms desligado => 1/(25*1000*1us) =
                  P1OUT ^= LED;    // liga/desliga o led
                  count=0;         // zera o contador
                }
		
	}
	return 0;
}


4. Pisque os LEDs da Launchpad numa frequência de 1 Hz.

#include <msp430g2553.h>

#define LED BIT0

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;	// Stop WDT
	
	BCSCTL1 = CALBC1_1MHZ;		//MCLK e SMCLK @ 1MHz
	DCOCTL = CALDCO_1MHZ;		//MCLK e SMCLK @ 1MHz
	P1OUT &= ~LED;
	P1DIR |= LED;
	TA0CCR0 = 1000-1; //10000-1;
	TA0CTL = TASSEL_2 + ID_1 + MC_1;
        int count=0;
        
	while(1)
	{
		while((TA0CTL & TAIFG)==0);
                count+=1;
                TA0CTL &= ~TAIFG;
                
                if(count==500){
                  P1OUT ^= LED;
                  count=0;
                }
		
	}
	return 0;
}


5. Pisque os LEDs da Launchpad numa frequência de 0,5 Hz.

#include <msp430g2553.h>

#define LED BIT0

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;	// Stop WDT
	
	BCSCTL1 = CALBC1_1MHZ;		//MCLK e SMCLK @ 1MHz
	DCOCTL = CALDCO_1MHZ;		//MCLK e SMCLK @ 1MHz
	P1OUT &= ~LED;
	P1DIR |= LED;
	TA0CCR0 = 1000-1; //10000-1;
	TA0CTL = TASSEL_2 + ID_1 + MC_1;
        int count=0;
        
	while(1)
	{
		while((TA0CTL & TAIFG)==0);
                count+=1;
                TA0CTL &= ~TAIFG;
                
                if(count==250){
                  P1OUT ^= LED;
                  count=0;
                }
		
	}
	return 0;
}


6. Repita as questões 2 a 5 usando a interrupção do Timer A para acender ou apagar os LEDs.

7. Defina a função void paralelo_para_serial(void); que lê o byte de entrada via porta P1 e transmite os bits serialmente via pino P2.0. Comece com um bit em nivel alto, depois os bits na ordem P1.0 - P1.1 - … - P1.7 e termine com um bit em nível baixo. Considere um período de 1 ms entre os bits.

P1DIR = 0;
P2DIR |= BIT0;

void paralelo_para_serial(void)
{
  P2OUT |= BIT0;
  Atraso(1);
  
  m = BIT0;
  
  for(b = 0; b < 8; b++)
  { if(P1IN & m) P2OUT |= BIT0;
    else P2OUT &=~ BIT0;
    Atraso(1);
    
    m = *=2;
  }
  
   P2OUT &=~ BIT0;
   Atraso(1);
}

8. Faça o programa completo que lê um byte de entrada serialmente via pino P2.0 e transmite este byte via porta P1. O sinal serial começa com um bit em nivel alto, depois os bits na ordem 0-7 e termina com um bit em nível baixo. Os pinos P1.0-P1.7 deverão corresponder aos bits 0-7, respectivamente. Considere um período de 1 ms entre os bits.

9. Defina a função void ConfigPWM(volatile unsigned int freqs, volatile unsigned char ciclo_de_trabalho); para configurar e ligar o Timer_A em modo de comparação. Considere que o pino P1.6 já foi anteriormente configurado como saída do canal 1 de comparação do Timer_A, que somente os valores {100, 200, 300, …, 1000} Hz são válidos para a frequência, que somente os valores {0, 25, 50, 75, 100} % são válidos para o ciclo de trabalho, e que o sinal de clock SMCLK do MSP430 está operando a 1 MHz.
