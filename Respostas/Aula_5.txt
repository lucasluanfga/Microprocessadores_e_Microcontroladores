Data: 29/03/2017

Para as questões 2 a 5, considere que as variáveis 'f', 'g', 'h', 'i' e 'j' são do tipo inteiro (16 bits na arquitetura do MSP430), e que o vetor 'A[]' é do tipo inteiro. Estas variáveis estão armazenadas nos seguintes registradores:
	f: R4
	g: R5
	h: R6
	i: R7
	j: R8
	A: R9
Utilize os registradores R11, R12, R13, R14 e R15 para armazenar valores temporários.

1. Escreva os trechos de código assembly do MSP430 para:
	(a) Somente setar o bit menos significativo de R5.
  
  mov.w #1, R11
  bis.w R11, R5
  
	(b) Somente setar dois bits de R6: o menos significativo e o segundo menos significativo.
  
  mov.w #3, R12
  bis.w R12, R6
  
	(c) Somente zerar o terceiro bit menos significativo de R7.
  
  mov.w #251, R11
  and.w R11, R7

	(d) Somente zerar o terceiro e o quarto bits menos significativo de R8.
	
	mov.w #243, R11
	and.w R11, R8
	
	(e) Somente inverter o bit mais significativo de R9.
	
	xor.w #128, R9
	
	(f) Inverter o nibble mais significativo de R10, e setar o nibble menos significativo de R10. 
	
	xor.w #128, R10
	mov.w #1, R11
  	bis.w R11, R10

2. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	if(i>j) f = g+h+10;
	else f = g-h-10;

  cmp R7, R8  
  jl else
  
  mov.w R5, R11
  mov.w R6, R12
  add.w R12, R11
  add.w #10, R11
  mov.w R11, R4
  jmp exit
  
  else:
  mov.w R5, R13
  mov.w R6, R14
  sub.w R14, R13
  sub.w #10, R13
  mov.w R13, R4
  exit:
 
  
3. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	while(save[i]!=k) i++;
  
  loop:
      mov.w R7, R13
      rla.w R13
      
      add.w R10, R13
      cmp 0(R13), R9
      jeq exit
      inc.w R7
      jmp loop
      
      exit:

4. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	for(i=0; i<100; i++) A[i] = i*2;
	
	  mov.w #0, R7		; i = R7, R7 = 0
loop_for1:cmp #100, R7		; compara R7 com 100
	  jge exit		; se R7 >= 100, vai para exit
	
	  mov.w R7, R11		; move R7 para o registrador temporário R11
	  rla R11			; multiplica R11 por 2, R11 = i*2
	  mov.w R11, R12		; R12 = i*2
	  add.w R9, R12		; R9 = A, R12 = R12 + R9 = R9 + i*2
	  mov.w R11, 0(R12)	; move R11 = i*2 para o endereço do vetor pelo qual R12 está apontando e andando 0 casas a direita do 					  vetor
	  inc.w R7		; incrementa R7, ou seja, R7 = R7 + 1
	  jmp loop
exit:
	
5. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	for(i=99; i>=0; i--) A[i] = i*2;
	
	 	mov.w #99, R7
loop_for2:	cmp #0, R7	; compara R7 com 0
		jl exit		; se R7 < 0, vai para exit
		
		mov.w R7, R11
		rla R11
		mov.w R11, R12
		add.w R9, R12
		mov.w R11, 0(R12)
		dec.w R7
		jmp loop_for2
exit:
		
		
		
		
		
		
	
	
	
	
	
	
