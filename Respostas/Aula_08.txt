Data: 26/04/2017

Para todas as questões, utilize os LEDs e/ou os botões da placa Launchpad do MSP430.

1. Escreva um código em C que pisca os LEDs ininterruptamente.

#include <msp430g2553.h>
#define LED1 BIT0
#define LED2 BIT6
#define LEDS (LED1|LED2)
//#define BTN  BIT3

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;     	// Stop WDT
	BCSCTL1 = CALBC1_1MHZ;		      //MCLK e SMCLK @ 1MHz
	DCOCTL = CALDCO_1MHZ;		        //MCLK e SMCLK @ 1MHz
	P1OUT &= ~LEDS;                 // DEFINE COMO SAIDA
	P1DIR |= LEDS;
	TA0CCR0 = 1000-1;               //10000-1;
	TA0CTL = TASSEL_2 + ID_3 + MC_1;
  
  int count=0;
        
	while(1)
	{
		while((TA0CTL & TAIFG)==0);
      count+=1;
      TA0CTL &= ~TAIFG;
                
      if(count==5){
        P1OUT ^= LEDS;
        count=0;
      }	
	}        
	return 0;        
}

2. Escreva um código em C que pisca os LEDs ininterruptamente. No ciclo que pisca os LEDs, o tempo que os LEDs ficam ligados deve ser duas vezes maior do que o tempo que eles ficam desligados.

#include <msp430g2553.h>
#define LED1 BIT0
#define LED2 BIT6
#define LEDS (LED1|LED2)
//#define BTN  BIT3

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;	            // Stop WDT
	BCSCTL1 = CALBC1_1MHZ;		            //MCLK e SMCLK @ 1MHz
	DCOCTL = CALDCO_1MHZ;		              //MCLK e SMCLK @ 1MHz
	P1OUT &= ~LEDS;                       // COMO SAIDA
	P1DIR |= LEDS;
	TA0CCR0 = 1000-1; //10000-1;
	TA0CTL = TASSEL_2 + ID_3 + MC_1;
       
        int count=0;
        int aux=0;
        
	while(1)
	{
		while((TA0CTL & TAIFG)==0);
                count+=1;
                TA0CTL &= ~TAIFG;
                
                if(count==100 & aux==0){
                  P1OUT ^= LEDS;
                  count=0;
                  aux=1;
                }
                
                if(count==200 & aux==1){
                  P1OUT ^= LEDS;
                  count=0;
                  aux=0;
                }
	}
	return 0;        
}

3. Escreva um código em C que acende os LEDs quando o botão é pressionado.


#include <msp430g2553.h>
#define LED1 BIT0
#define LED2 BIT6
#define LEDS (LED1|LED2)
#define BTN  BIT3

int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;
	P1OUT |= LEDS;
	P1DIR |= LEDS;
	P1DIR &= ~BTN;
	P1REN |= BTN;
	P1OUT |= BTN;
	while(1)
	{
		if((P1IN&BTN)==0)
			P1OUT |= LEDS;
		else
			P1OUT &= ~LEDS;
	}
	return 0;
}

4. Escreva um código em C que pisca os LEDs ininterruptamente somente se o botão for pressionado.

#include <msp430g2553.h>
#define LED1 BIT0
#define LED2 BIT6
#define LEDS (LED1|LED2)
#define BTN  BIT3

int main(void)
{
        
	WDTCTL = WDTPW | WDTHOLD;
	// pinos
        P1OUT |= LEDS;
	P1DIR |= LEDS;
	P1DIR &= ~BTN;
	P1REN |= BTN;
	P1OUT |= BTN;
        P1OUT &= ~LEDS;
	//clock
        BCSCTL1 = CALBC1_1MHZ;		//MCLK e SMCLK @ 1MHz
	DCOCTL = CALDCO_1MHZ;		//MCLK e SMCLK @ 1MHz
	TA0CCR0 = 1000-1; //10000-1;
	TA0CTL = TASSEL_2 + ID_3 + MC_1;
       // variaveis
        int aux=0;
        int count=0;
        while(1)
	{
          if((P1IN&BTN)==0 & aux==0){
             aux=1;
          }

          if(aux==1){
	  {
		while((TA0CTL & TAIFG)==0);
                count+=1;
                TA0CTL &= ~TAIFG;
                
                if(count==5){
                  P1OUT ^= LEDS;
                  count=0;
                }
	  }
          }
        }      
	return 0;
}

5. Escreva um código em C que acende os LEDs quando o botão é pressionado. Deixe o MSP430 em modo de baixo consumo, e habilite a interrupção do botão.

#include <msp430g2553.h>
#include <legacymsp430.h>


// definições iniciais
#define LED1 BIT0
#define LED2 BIT6
#define LEDS (LED1|LED2)
#define BTN  BIT3

int main(void)
{
  	//clock
    
	WDTCTL = WDTPW | WDTHOLD;       // Coloca a senha do WDT e o desliga
        BCSCTL1 = CALBC1_1MHZ;		// seta o master clock
	DCOCTL = CALDCO_1MHZ;		//MCLK e SMCLK @ 1MHz

	// pinos
        P1OUT |= LEDS;                //
	P1DIR |= LEDS;                // habilita como saida
	P1DIR &= ~BTN;                // liga os leds
	P1REN |= BTN;                 // habilita o resistor de PULLUP
	P1OUT |= BTN;
        P1OUT &= ~LEDS;               // desliga os leds


       // MODO DE BAIXO CONSUMO
        P1IES |= BTN;                 //    habilita a borda de descida
	P1IE |= BTN;                  //    Configura interrupção para o botão
	_BIS_SR(GIE + LPM4_bits);     //    MSP430 ENTRA NO MODO MAIS DRASTICO DE BAIXO CONSUMO
	
        return 0;   
}


//INTERRUPÇÃO
#pragma vector=PORT1_VECTOR
__interrupt void Interrupcao_Botao(void)
{
	P1OUT ^= LEDS;            // inverte o valor de P1 (liga os leds)
	while((P1IN&BTN)==0);     // enquanto o botão estiver pressionado
	P1OUT ^= LEDS;            // inverte o valor de P1 (desliga os leds)
	P1IFG &= ~BTN;            // limpa a flag de interrupção
}
